[
    {
      "id": "post1",
      "title": "Ignition 7.8 Online Docs!",
      "category": "Documentation",
      "excerpt": "We finally have the Ignition 7.8 docs online",
      "videoUrl": "",
      "url": "https://www.ourscada.com/main/system/help/Ignition_User_Manual.html",
      "content": "Not the biggest discovery of Ignition documentation, but its great to see the 7.8 docs are available without having to download a PDF."
    },
    {
      "id": "post2",
      "title": "Getting Started with TypeScript",
      "category": "Web",
      "excerpt": "A beginner-friendly introduction to TypeScript.",
      "videoUrl": "https://www.youtube.com/embed/BwuLxPH8IDs",
      "url": "https://myblog.com/typescript-intro",
      "content": "### Understanding MQTT Modules\n\nMQTT is a lightweight pub/sub protocol… (your full post here)"
    },
    {
      "id": "post3",
      "title": "Building a Pac-Man Game in JavaScript",
      "category": "Game",
      "excerpt": "Follow along to build your own Pac-Man clone using HTML5 canvas.",
      "videoUrl": "https://www.youtube.com/embed/HJ7RinS85CU",
      "url": "https://myblog.com/pacman-js",
      "content": "### Understanding MQTT Modules\n\nMQTT is a lightweight pub/sub protocol… (your full post here)"
    },
    {
    "id": "post5",
    "title": "Managing Ignition GAN Connections via JSON",
    "category": "Tutorial",
    "excerpt": "Use a JSON configuration file to automatically add, disable, and clean up Ignition GAN connections with a Jython 2.7 script.",
    "videoUrl": "",
    "url": "",
    "content": "Below is the JSON configuration file used to define which connections to disable and which to add, scoped by region:\n\n```json\n{\n  \"disable_connections\": [\n    {\n      \"host\": \"someHost\",\n      \"port\": 8060,\n      \"ssl_enabled\": false\n    }\n  ],\n  \"add_connections\": [\n    {\n      \"region\": \"NA\",\n      \"connections\": [\n        {\n          \"host\": \"10.10.60.148\",\n          \"port\": 8060,\n          \"ssl_enabled\": true\n        }\n      ]\n    }\n  ]\n}\n```\n\nAnd here is the corresponding Jython (2.7) script (`GANConnectionManager.py`), which reads the above JSON and synchronizes Ignition GAN connections accordingly:\n\n```python\n# Python standard libraries\nimport sys\nimport json\nimport logging\nfrom urlparse import urlparse\n\n# Ignition gateway APIs\nfrom com.inductiveautomation.ignition.gateway import IgnitionGateway\nfrom com.inductiveautomation.ignition.gateway.gan import GanSetupItem\nfrom com.inductiveautomation.ignition.gateway.gan import WSConnectionSettings\nfrom simpleorm.dataset import SQuery, SQueryMode\n\nclass GANConnectionManager(object):\n    \"\"\"\n    Manages Ignition Gateway Area Network (GAN) outgoing connections\n    based on a simple JSON configuration.\n    \"\"\"\n\n    # Description tag for connections this manager creates\n    MANAGED_DESCRIPTION = \"Managed by GANConnectionManager\"\n\n    def __init__(self, config_path, region=\"NA\"):\n        \"\"\"\n        :param config_path: Path to the JSON config file.\n        :param region:      Region code to select appropriate connections.\n        \"\"\"\n        # Configure logging\n        self.logger = logging.getLogger(\"GANConnectionManager\")\n\n        self.config_path = config_path\n        self.region = region.upper()\n\n        # Gateway services\n        gw = IgnitionGateway.get()\n        self.gan = gw.getGatewayAreaNetworkManager()\n        self.persistence = gw.getPersistenceInterface()\n\n        # Load JSON config\n        self.config = self._load_json(self.config_path)\n\n    def _load_json(self, path):\n        \"\"\"\n        Load and parse the JSON configuration file.\n        Exit the script on failure.\n        \"\"\"\n        try:\n            with open(path, 'r') as f:\n                return json.load(f)\n        except Exception as e:\n            self.logger.error(\"Failed to load config from %s: %s\", path, e)\n            sys.exit(1)\n\n    def auto_manage_connections(self):\n        \"\"\"\n        Main method to sync GAN connections:\n        1. Add or update desired connections.\n        2. Disable explicitly disabled ones.\n        3. Clean up stale or faulted connections.\n        \"\"\"\n        current = self._build_current_connections()\n        existing = {(c['host'], c['port'], c['ssl']) for c in current}\n\n        to_add = self._get_add_list_for_region()\n        for conn in to_add:\n            key = (conn['host'], conn['port'], conn['ssl_enabled'])\n            if key not in existing:\n                self._add_or_enable(conn['host'], conn['port'], conn['ssl_enabled'])\n            else:\n                match = next(c for c in current if (c['host'], c['port'], c['ssl']) == key)\n                if match['description'] != self.MANAGED_DESCRIPTION:\n                    self._delete(match['host'], match['port'])\n                    self._add_or_enable(conn['host'], conn['port'], conn['ssl_enabled'])\n\n        for c in self.config.get('disable_connections', []):\n            self._disable(c['host'], c['port'], c['ssl_enabled'])\n\n        self._cleanup_stale(current, to_add)\n        self.logger.info(\"auto_manage_connections complete.\")\n\n    def _get_add_list_for_region(self):\n        for block in self.config.get('add_connections', []):\n            if block.get('region', '').upper() == self.region:\n                return block.get('connections', [])\n        return []\n\n    def _build_current_connections(self):\n        live = self.gan.getAvailableConnections()\n        query = SQuery(WSConnectionSettings.META, SQueryMode.SFOR_UPDATE)\n        records = self.persistence.query(query)\n\n        results = []\n        for rec in records:\n            host = rec.getHost().lower()\n            port = rec.getPort()\n            status = None\n            for l in live:\n                addr = l.getRemoteNetworkAddress().get()\n                parsed = urlparse(addr)\n                if (parsed.hostname or '').lower() == host and parsed.port == port:\n                    status = l.getStatus()\n                    break\n\n            results.append({\n                'id': rec.getId(),\n                'name': rec.getName(),\n                'host': rec.getHost(),\n                'port': rec.getPort(),\n                'ssl': rec.isSSL(),\n                'enabled': rec.isEnabled(),\n                'description': rec.getDescription(),\n                'status': status\n            })\n        return results\n\n    def _add_or_enable(self, host, port, ssl_enabled):\n        item = GanSetupItem()\n        item.setHost(host)\n        item.setPort(port)\n        item.setEnableSsl(ssl_enabled)\n        item.setEnabled(True)\n        item.setDescription(self.MANAGED_DESCRIPTION)\n        self.gan.addGanConnection(item)\n        self.logger.info(\"Added/enabled %s:%s (ssl=%s)\", host, port, ssl_enabled)\n\n    def _disable(self, host, port, ssl_enabled):\n        if self.gan.ganConnectionExists(host, port, ssl_enabled):\n            item = GanSetupItem()\n            item.setHost(host)\n            item.setPort(port)\n            item.setEnableSsl(ssl_enabled)\n            item.setEnabled(False)\n            self.gan.addGanConnection(item)\n            self.logger.info(\"Disabled %s:%s (ssl=%s)\", host, port, ssl_enabled)\n\n    def _delete(self, host, port):\n        query = SQuery(WSConnectionSettings.META, SQueryMode.SFOR_UPDATE)\n        query = query.eq(WSConnectionSettings.Host, host)\n        query = query.eq(WSConnectionSettings.Port, port)\n        rec = self.persistence.queryOne(query)\n        if rec:\n            rec.deleteRecord()\n            self.persistence.save(rec)\n            self.logger.info(\"Deleted %s:%s\", host, port)\n        else:\n            self.logger.warning(\"No record to delete for %s:%s\", host, port)\n\n    def _cleanup_stale(self, current, to_add):\n        desired = {(c['host'], c['port'], c['ssl_enabled']) for c in to_add}\n        for c in current:\n            key = (c['host'], c['port'], c['ssl'])\n            stale = (not c['enabled']) or (str(c['status']) == 'Faulted') or (key not in desired)\n            if c['description'] == self.MANAGED_DESCRIPTION and stale:\n                self.logger.info(\"Cleaning up %s:%s\", c['host'], c['port'])\n                self._delete(c['host'], c['port'])\n```"
  }

  ]
  